import streamlit as st
import pandas as pd

st.set_page_config(page_title="Intelligent-System-project", layout="wide")

st.sidebar.header("Navigation")
st.sidebar.page_link("Machine_Learning.py", icon="ü§ñ", disabled=True)
st.sidebar.page_link("pages/Neural_Network.py", icon="üß†")
st.sidebar.page_link("pages/Demo_Machine_Learning.py", icon="üìä")
st.sidebar.page_link("pages/Demo_Neural_Network.py", icon="üìà")

st.markdown('<h1 style="font-size: 40px;">ü§ñ Machine Learning Deployment</h1>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

with st.expander("üìå **Machine Learning ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£!**"):
    st.info("""
    **Machine Learning ‡∏Ñ‡∏∑‡∏≠** ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏≠‡∏á ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö  
    - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏Ñ‡∏≠‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ‡πÜ  
    - ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ **‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á** ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á  
    - **‡∏ä‡πà‡∏ß‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô  
    """)

with st.expander("üìå **‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á Machine Learning!**"):
    st.info("""
    **Machine Learning** ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤  
    - **Google Maps**: ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î  
    - **Google Translate**: ‡∏ô‡∏≥ Automation ‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Machine Learning ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô  
    - **Speech-to-Text** (‡πÄ‡∏ä‡πà‡∏ô LINE Chat): ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå  
    """)

st.markdown('''
    <p style="font-size: 20px;">
            From Chat Gpt Create the Dataset
        <a href="https://drive.google.com/file/d/1c1AkKC3XJyQbBHK1xOpBkQByOFnRYvPq/view" 
           target="_blank" style="font-size: 25px; color: blue;">
           health-nutrition-survey.csv
        </a>.
        <br>
    </p>
''', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

st.markdown('<h1 style="font-size: 40px;">üìö ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö</h1>', unsafe_allow_html=True)
st.markdown('''
    <p style="font-size: 20px;">
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏ 8-12 ‡∏õ‡∏µ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏≠‡∏≤‡∏¢‡∏∏, ‡πÄ‡∏û‡∏®, ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å, ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á, BMI, ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢, ‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
            
        ‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
            - ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            - ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 8-12 ‡∏õ‡∏µ
            - ‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI) ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
            - ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (Nutritional Intake) ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
            - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ (Physical Activity) ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
            - ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (Health Condition) ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Å‡∏±‡∏ô
            - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏®‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    </p>
''', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

st.markdown('<h1 style="font-size: 40px;">üìä Features ‡∏´‡∏•‡∏±‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Dataset ‡∏ô‡∏µ‡πâ</h1>', unsafe_allow_html=True)
with st.expander("üìå **Click Here to Learn More!**"):
    st.markdown("""
    - **Age (‡∏≠‡∏≤‡∏¢‡∏∏)**: ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠ BMI ‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å;**‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (Integer)**
    - **Gender (‡πÄ‡∏û‡∏®)**: ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô;**‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (M/F)**
    - **Height (‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á)**: ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI;**‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (Float)**
    - **Weight (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å)**: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û;**‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (Float)**
    - **BMI (‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢)**: Feature ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà;**‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (Float)**
    - **Nutritional Intake (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ)**: ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å;**‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (Float)**
    - **Physical Activity (‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢)**: ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠ BMI ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å;**‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (High, Medium, Low)**
    """, unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

st.markdown('<h1 style="font-size: 40px;">Show DataFrame As Dataset</h1>', unsafe_allow_html=True)
df = pd.read_csv("Dataset/health_nutrition_survey.csv")  
st.dataframe(df)  

st.write("<br><br>", unsafe_allow_html=True)

st.markdown("""
    <h1 style="font-size: 40px; color: #FF5733;">
        üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• | ‡πÇ‡∏°‡πÄ‡∏î‡∏• | ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤
    </h1>
""", unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

st.markdown('## health_nutrition_survey.csv')

code = '''
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    from google.colab import files
    uploaded = files.upload()
    file_name = list(uploaded.keys())[0]
    df = pd.read_csv(file_name)
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏á‡∏≤‡∏ô</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    print(df.info())
    print(df.head())
'''
st.code(code, language="python")

st.markdown('<h5 style="font-size: 20px;">‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡∏û‡∏•‡πá‡∏≠‡∏ï Boxplot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Outliers
    plt.figure(figsize=(12, 6))
    sns.boxplot(data=df.select_dtypes(include=['float64', 'int64']))
    plt.title('Boxplot of Numeric Features')
    plt.show()
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠ Outlier</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡∏û‡∏•‡πá‡∏≠‡∏ï Histogram ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    df.select_dtypes(include=['float64', 'int64']).hist(figsize=(12, 8), bins=20)
    plt.suptitle('Histogram of Numeric Features')
    plt.show()
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô Feature ‡πÇ‡∏î‡∏¢ plot Histogram</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡∏û‡∏•‡πá‡∏≠‡∏ï Heatmap ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    plt.figure(figsize=(10, 6))
    sns.heatmap(df.select_dtypes(include=['float64', 'int64']).corr(), annot=True, cmap='coolwarm', fmt='.2f')
    plt.title('Correlation Heatmap')
    plt.show()
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏∞‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Heatmap plot corelation</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # Countplot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ categorical
    categorical_cols = ['Gender', 'Physical Activity', 'Health Condition']
    for col in categorical_cols:
        plt.figure(figsize=(8, 4))
        sns.countplot(x=col, data=df)
        plt.title(f'Countplot of {col}')
        plt.show()
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">Countplot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ categorical ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ Column</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
    for col in ['Weight', 'BMI', 'Nutritional Intake']:
        df.loc[:, col] = df[col].fillna(df[col].median())
    df.loc[:, 'Physical Activity'] = df['Physical Activity'].fillna(df['Physical Activity'].mode()[0]).infer_objects(copy=False)

    # Label Encoding
    label_encoders = {}
    categorical_cols = ['Gender', 'Physical Activity', 'Health Condition']
    for col in categorical_cols:
        le = LabelEncoder()
        df.loc[:, col] = le.fit_transform(df[col])
        label_encoders[col] = le
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Categorical ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡πÅ‡∏¢‡∏Å Features ‡πÅ‡∏•‡∏∞ Target
    X = df.drop(columns=['Health Condition'])
    y = df['Health Condition'].astype(int)
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡πÅ‡∏¢‡∏Å Features ‡πÅ‡∏•‡∏∞ Target ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Class Imbalance ‡∏î‡πâ‡∏ß‡∏¢ SMOTE
    smote = SMOTE(random_state=42)
    X_resampled, y_resampled = smote.fit_resample(X, y)
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Class Imbalance ‡∏î‡πâ‡∏ß‡∏¢ SMOTE</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Train/Test
    X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42, stratify=y_resampled)
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô (Training set) ‡πÅ‡∏•‡∏∞ ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Testing set) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest
    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
    rf_model.fit(X_train, y_train)
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Training set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

code = '''
    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
    y_pred = rf_model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)

    print(f'Accuracy: {accuracy:.2f}')
    print('Classification Report:\n', report)
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ö‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Testing set ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ metrics ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô Accuracy ‡πÅ‡∏•‡∏∞ Classification report ‡∏ã‡∏∂‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô</h5>', unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

st.markdown("""
    <h1 style="font-size: 40px; color: #FF5733;">
        üìö ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
    </h1>
""", unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

st.markdown("""
    <div style="
        background-color: #1E1E1E; 
        padding: 25px; 
        border-radius: 12px;
        box-shadow: 3px 3px 12px rgba(255,255,255,0.2);
        margin: 20px 0px;
    ">
    <div 
        <h3 style="color: #FF5733;">1.  Random Forest</h3>
        <p style="color: #F8F8FF;">‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡∏´‡∏•‡∏≤‡∏¢ Decision Tree ‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Features ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
            ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Voting ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
    </div>
    <div 
        <h4 style="color: #FFA07A;"> üîπ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Random Forest:</h4>
        <ul style="color: #F8F8FF;">
            <li><b>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏° (Bootstrap Sampling):</b> ‚Äì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∏‡∏î</li>
            <li><b>‡∏™‡∏£‡πâ‡∏≤‡∏á Decision Trees:</b> ‚Äì ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏ì‡∏ë‡πå Gini Impurity ‡∏´‡∏£‡∏∑‡∏≠ Entropy</li>
            <li><b>‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ:</b> ‚Äì ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Voting (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Classification)</li>
            <li><b>‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•:</b> ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Accuracy, Precision, Recall</li>
        </ul>
        <p>üìå ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á, ‡∏ó‡∏ô‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
            üìå ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢: ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥</p>
    </div>
    <div 
        <h3 style="color: #FF5733;">2. Logistic Regression</h3>
        <p style="color: #F8F8FF;">‡πÄ‡∏õ‡πá‡∏ô ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå Health Condition ‡∏ß‡πà‡∏≤‡πÄ‡∏î‡πá‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° Underweight, Healthy ‡∏´‡∏£‡∏∑‡∏≠ Overweight/Obese ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Sigmoid ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-1 ‡πÉ‡∏ä‡πâ Threshold (0.5) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°</p>
    </div>
    <div
        <h4 style="color: #FFA07A;"> üîπ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Logistic Regression:</h4>
        <ul style="color: #F8F8FF;">
            <li><b>‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</b> ‚Äì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ä‡πà‡∏ô Age, Gender, BMI, Nutritional Intake, Physical Activity"</li>
            <li><b>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:</b> ‚Äì ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Logistic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°</li>
            <li><b>‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</b> ‚Äì ‡∏ñ‡πâ‡∏≤ P(Y) > 0.5 ‚Üí Overweight/Obese, ‡∏ñ‡πâ‡∏≤ P(Y) < 0.5 ‚Üí Healthy ‡∏´‡∏£‡∏∑‡∏≠ Underweight</li>
            <li><b>‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•:</b> ‚Äì ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (Accuracy), Precision ‡πÅ‡∏•‡∏∞ Recall</li>
        </ul>
        <p>üìå ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ: ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢, ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ï‡πà‡∏≥
            üìå ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢: ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô</p>
    </div>
        <div 
            <h3 style="color: #FF5733;">üîπ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Random Forest ‡πÅ‡∏•‡∏∞ Logistic Regression</h3>
            <table style="color: #F8F8FF; width: 100%; border-collapse: collapse; border: 1px solid white; text-align: center;">
                <tr style="background-color: #333;">
                    <th style="padding: 12px; border: 1px solid white;">‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°</th>
                    <th style="padding: 12px; border: 1px solid white;">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</th>
                    <th style="padding: 12px; border: 1px solid white;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô</th>
                    <th style="padding: 12px; border: 1px solid white;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</th>
                    <th style="padding: 12px; border: 1px solid white;">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô</th>
                </tr>
                <tr>
                    <td style="padding: 10px; border: 1px solid white;">Logistic Regression</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏ï‡πà‡∏≥</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏™‡∏π‡∏á</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏à‡∏≥‡∏Å‡∏±‡∏î</td>
                </tr>
                <tr style="background-color: #222;">
                    <td style="padding: 10px; border: 1px solid white;">Random Forest</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏™‡∏π‡∏á</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏™‡∏π‡∏á</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</td>
                    <td style="padding: 10px; border: 1px solid white;">‡∏î‡∏µ</td>
                </tr>
            </table>
        </div>
    </div>
""", unsafe_allow_html=True)

st.write("<br><br>", unsafe_allow_html=True)

st.markdown("""
    <h1 style="font-size: 40px; color: #FF5733;">
        üöÄ Machine Learning (health_nutrition_survey.csv)
    </h1>
""", unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

with st.expander("üìå **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•!**"):
    st.markdown("""
        <div style="
            background-color: #1E1E1E; 
            padding: 25px; 
            border-radius: 12px;
            box-shadow: 3px 3px 12px rgba(255,255,255,0.2);
            margin: 20px 0px;
        ">
            <ul style="color: #F8F8FF; font-size: 18px; line-height: 1.6;">
                <li>1Ô∏è‚É£ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preprocessing)</li>
                <li>2Ô∏è‚É£ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression</li>
                <li>3Ô∏è‚É£ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest</li>
            </ul>
        </div>
    """, unsafe_allow_html=True)

st.write("<br>", unsafe_allow_html=True)

st.markdown('## ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Random Forest ‡πÅ‡∏•‡∏∞ Logistic Regression')
code = '''
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV

def load_data(uploaded_file):
    df = pd.read_csv(uploaded_file)
    return df

def preprocess_data(df):
    # Drop irrelevant columns if exists
    if 'Student ID' in df.columns:
        df.drop(columns=['Student ID'], inplace=True)
    
    # Fill missing values for numerical columns with mean
    num_cols = df.select_dtypes(include=['number']).columns
    imputer = SimpleImputer(strategy='mean')
    df[num_cols] = imputer.fit_transform(df[num_cols])
    
    # Encode categorical variables
    cat_cols = df.select_dtypes(include=['object']).columns
    for col in cat_cols:
        df[col] = LabelEncoder().fit_transform(df[col].astype(str))
    
    return df

def train_model(df):
    X = df.drop(columns=['Health Condition'])
    y = df['Health Condition']
    
    # Split data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
    
    # Train model
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # Predict
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True, zero_division=1)
    cm = confusion_matrix(y_test, y_pred)
    
    return model, accuracy, report, cm, X.columns

st.title("Health & Nutrition Random Forest")

uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])

if uploaded_file:
    df = load_data(uploaded_file)
    st.write("### Raw Data")
    st.write(df.head())
    
    st.write("### Exploratory Data Analysis")
    st.write("#### Missing Values")
    st.write(df.isnull().sum())
    
    st.write("#### Data Distribution")
    fig, ax = plt.subplots()
    sns.histplot(df['Age'], kde=True, ax=ax)
    st.pyplot(fig)
    
    # Preprocessing
    df = preprocess_data(df)
    
    # Train model
    model, accuracy, report, cm, feature_names = train_model(df)
    
    st.write("### Model Performance")
    st.write(f"Accuracy: {accuracy:.2f}")
    st.write("#### Classification Report")
    st.write(pd.DataFrame(report).transpose())
    
    # Confusion Matrix
    st.write("#### Confusion Matrix")
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(df['Health Condition']), yticklabels=np.unique(df['Health Condition']))
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    st.pyplot(fig)
    
    # Feature Importance
    st.write("#### Feature Importance")
    feature_importance = model.feature_importances_
    fig, ax = plt.subplots()
    sns.barplot(x=feature_importance, y=feature_names, ax=ax)
    plt.xlabel("Importance Score")
    plt.ylabel("Features")
    plt.title("Feature Importance in Random Forest")
    st.pyplot(fig)
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Streamlit ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û, ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å </h5>', unsafe_allow_html=True)

code = '''
    # Step 1: Load Data
st.title("Predict BMI With Column Weight and Height")
st.title("Logistic Regression Model")
uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])

st.write("### BMI Classification Table")
st.write("""
| BMI Range        | Classification       |
|-----------------|---------------------|
| BMI < 18.5      | Underweight         |
| 18.5 ‚â§ BMI < 24.9 | Normal weight      |
| BMI ‚â• 25        | Overweight/Obese    |
""")

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write("### Dataset Preview")
    st.write(df.head())

    # Select Features
    feature_cols = st.multiselect("Select Feature Columns", df.columns, default=["Weight", "Height"])

    if "Weight" in feature_cols and "Height" in feature_cols:
        df["BMI"] = df["Weight"] / ((df["Height"] / 100) ** 2)

        # Classify BMI
        df["BMI_Class"] = pd.cut(
            df["BMI"],
            bins=[0, 18.5, 24.9, np.inf],
            labels=["Underweight", "Normal weight", "Overweight/Obese"]
        )

        # Drop missing values before training
        df_cleaned = df.dropna(subset=["Weight", "Height", "BMI_Class"])

        X = df_cleaned[feature_cols].copy()
        y = df_cleaned["BMI_Class"]

        # Step 2: Preprocessing
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Fill missing values in X_train and X_test
        X_train.fillna(X_train.mean(), inplace=True)
        X_test.fillna(X_test.mean(), inplace=True)

        scaler = StandardScaler()
        X_train = scaler.fit_transform(X_train)
        X_test = scaler.transform(X_test)

        # Step 3: Train Model
        model = LogisticRegression()
        model.fit(X_train, y_train)

        # Step 4: Evaluate Model
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred, output_dict=True, zero_division=1)
        conf_matrix = confusion_matrix(y_test, y_pred)

        st.write("### Model Performance")
        st.write(f"Accuracy: {accuracy:.4f}")
        st.write("#### Classification Report")
        st.dataframe(pd.DataFrame(report).transpose())
        st.write("#### Confusion Matrix")
        fig, ax = plt.subplots()
        sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", ax=ax)
        st.pyplot(fig)

        # Step 5: Hyperparameter Tuning
        st.write("### Hyperparameter Tuning")
        param_grid = {'C': [0.01, 0.1, 1, 10, 100], 'penalty': ['l1', 'l2']}
        grid_search = GridSearchCV(LogisticRegression(solver='liblinear'), param_grid, cv=5)
        grid_search.fit(X_train, y_train)
        st.write(f"Best Parameters: {grid_search.best_params_}")

        # Step 6: Deployment (Simple Prediction)
        st.write("### Make a Prediction")
        weight = st.number_input("Enter Weight (kg)", value=55.0)
        height = st.number_input("Enter Height (cm)", value=170.0)

        if st.button("Predict"):
            user_bmi = weight / ((height / 100) ** 2)
            scaled_input = scaler.transform([[weight, height]])
            prediction = model.predict(scaled_input)

            st.write(f"Predicted BMI: {user_bmi:.2f}")
            st.write(f"Predicted Class: {prediction[0]}")
'''
st.code(code, language="python")
st.markdown('<h5 style="font-size: 20px;">‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Streamlit ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û, ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å</h5>', unsafe_allow_html=True)
